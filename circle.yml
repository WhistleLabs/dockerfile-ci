machine:
  environment:
    MAJOR_VERSION_TAG: 2
    PACKER_VERSION_TAG: 1.0.0
    TERRAFORM_VERSION_TAG: 0.10.6
    NODE_VERSION_TAG: 7.5.0
    DOCKER_BIN_TAG: 'node-7.5.0'
    CI_CONTAINER_NAME: 'whistle-ci'
    TF_IMAGE: 'unifio/terraform'
    PKR_IMAGE: 'unifio/packer'
    CI_IMAGE_NAME: 'whistle/ci'
    CI_NODE_IMAGE_NAME: 'whistle/ci:node-7.5.0'
  services:
    - docker

dependencies:
  pre:
    - sudo apt-get update; sudo apt-get install -y jq curl
  cache_directories:
    - "~/docker"
  override:
    - docker info
    - docker login -e $DOCKER_EMAIL -u $DOCKER_USER -p $DOCKER_PASS
    - >
      if [[ $(./tagexists.sh ${CI_IMAGE_NAME}) == "1" ]];then
        ./copybins.sh node && \
        echo node >> ~/.allbinaries && echo npm >> ~/.allbinaries
      else
        echo "Building Node.js binary image. ${CI_NODE_IMAGE_NAME} was not found."
        echo "The build will take about 40 minutes to complete."
          if [[ -e ~/docker/image_${DOCKER_BIN_TAG}.tar ]]; then
              docker load --input ~/docker/image_${DOCKER_BIN_TAG}.tar
          fi
          if docker build -f Dockerfile-build-node --rm=false -t "${CI_NODE_IMAGE_NAME}" .; then
            echo newJStag >> ~/.allbinaries
            echo "${CI_NODE_IMAGE_NAME} has been built and will be pushed to dockerhhub"
            ./copybins.sh node && \
            echo node >> ~/.allbinaries && echo npm >> ~/.allbinaries
            mkdir -p ~/docker; docker save "${CI_NODE_IMAGE_NAME}" > ~/docker/image_${DOCKER_BIN_TAG}.tar
            docker push "${CI_NODE_IMAGE_NAME}"
          fi
        fi
    - >
      if [[ $(DOCKER_BIN_TAG="${TERRAFORM_VERSION_TAG}" ./tagexists.sh ${TF_IMAGE}) == "1" ]];then
        ./copybins.sh terraform && \
        echo terraform >> ~/.allbinaries
      fi
    - >
      if [[ $(DOCKER_BIN_TAG="${PACKER_VERSION_TAG}" ./tagexists.sh ${PKR_IMAGE}) == "1" ]];then
        ./copybins.sh packer && \
        echo packer >> ~/.allbinaries
      fi
    - >
      if [[ -n "${CIRCLE_TOKEN}" ]];then
        ./copybins.sh promote-atlas-artifact && \
        echo promote-atlas-artifact >> ~/.allbinaries
      fi
    - >
      if [[ -e ~/docker/image.tar ]]; then
        docker load --input ~/docker/image.tar
      fi
    - >
      if grep -q node ~/.allbinaries; then
        docker build -f Dockerfile-node --rm=false -t "${CI_IMAGE_NAME}":latest .
      else
        docker build --rm=false -t "${CI_IMAGE_NAME}":latest .
      fi
    - mkdir -p ~/docker; docker save "${CI_IMAGE_NAME}":latest > ~/docker/image.tar
    - cat ~/.allbinaries

test:
  override:
    - docker run --entrypoint /bin/sh "${CI_IMAGE_NAME}" -c "gem list | grep covalence"
    - docker run --entrypoint /bin/sh "${CI_IMAGE_NAME}" -c "aws --version"
    - >
      if grep -q packer ~/.allbinaries; then
        docker run -e CHECKPOINT_DISABLE=1 \
          --entrypoint /bin/sh "${CI_IMAGE_NAME}" -c "packer version"
      fi
    - >
      if grep -q terraform ~/.allbinaries; then
        docker run -e CHECKPOINT_DISABLE=1 \
          --entrypoint /bin/sh "${CI_IMAGE_NAME}" -c "terraform version"
      fi
    - >
      if grep -q newJStag ~/.allbinaries; then
        echo "The ${CI_NODE_IMAGE_NAME} was built but still needs to be pushed to docker hub."
        docker run --entrypoint /bin/sh "${CI_IMAGE_NAME}:${DOCKER_BIN_TAG}" -c "node --version"
      fi
    - >
      if grep -q node ~/.allbinaries; then
        docker run --entrypoint /bin/sh "${CI_IMAGE_NAME}" -c "node --version"
      fi
    - >
      if grep -q npm ~/.allbinaries; then
        docker run --entrypoint /bin/sh "${CI_IMAGE_NAME}" -c "npm --version"
      fi
    - >
      if [[ -n "$CIRCLE_TOKEN" ]]; then
        docker run --entrypoint /bin/sh ${CI_IMAGE_NAME} -c "promote-atlas-artifact --version"
      fi
    - cat ~/.allbinaries
deployment:
  hub:
    branch: master
    commands:
      - docker login -e $DOCKER_EMAIL -u $DOCKER_USER -p $DOCKER_PASS
      - >
        if grep -q node ~/.allbinaries; then
          IMAGE_TO_TAG=$(docker images | grep -E "${CI_IMAGE_NAME}" | grep -v "${DOCKER_BIN_TAG}" | awk '{print $3}')
          docker tag -f "${IMAGE_TO_TAG}" "${CI_IMAGE_NAME}":${PACKER_VERSION_TAG}.${TERRAFORM_VERSION_TAG}.${NODE_VERSION_TAG}.${CIRCLE_BUILD_NUM}
          docker push "${CI_IMAGE_NAME}":${PACKER_VERSION_TAG}.${TERRAFORM_VERSION_TAG}.${NODE_VERSION_TAG}.${CIRCLE_BUILD_NUM}
        fi
      - >
        if ! grep -q node ~/.allbinaries; then
          IMAGE_TO_TAG=$(docker images | grep -E "${CI_IMAGE_NAME}" | grep -v "${DOCKER_BIN_TAG}" | awk '{print $3}')
          docker tag -f "${IMAGE_TO_TAG}" "${CI_IMAGE_NAME}":${PACKER_VERSION_TAG}.${TERRAFORM_VERSION_TAG}.${CIRCLE_BUILD_NUM}
          docker push "${CI_IMAGE_NAME}":${PACKER_VERSION_TAG}.${TERRAFORM_VERSION_TAG}.${CIRCLE_BUILD_NUM}
        fi
      - docker push "${CI_IMAGE_NAME}":latest
