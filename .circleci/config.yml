version: 2

jobs:
  build:
    docker:
      - image: circleci/python:latest

    environment:
      CI_IMAGE_NAME: 'whistle/ci'
      PACKER_VERSION: '1.4.4'
      TERRAFORM_VERSION: '0.12.29'
      ALPINE_VERSION: '3.10'
      DUMBINIT_VERSION: '1.2.2'
      GOSU_VERSION: '1.12'
      RUBY_VERSION: '2.5.5'
      SOPS_VERSION: '3.6.1'
      TERRAGRUNT_VERSION: '0.24.4'
      BUNDLER_VERSION: '1.17.3'
    steps:
      - restore_cache:
          keys:
            - source-v2-{{ .Branch }}-{{ .Revision }}
            - source-v2-{{ .Branch }}-
            - source-v2-

      - checkout
      - run:
          name: checkout-submodules
          command: |
            set -eo pipefail

            git submodule sync
            git submodule update --init

      - save_cache:
          key: source-v2-{{ .Branch }}-{{ .Revision }}
          paths:
            - ".git"

      - setup_remote_docker:
          version: 17.10.0-ce

      - run:
          name: docker info
          command: |
            set -eo pipefail

            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker info

      - restore_cache:
          keys:
            - docker-tar-v2-{{ .Branch }}-{{ .Revision }}
            - docker-tar-v2-{{ .Branch }}-
            - docker-tar-v2-

      - run:
          name: Load docker image
          command: |
            set -eo pipefail

            if [[ -e ~/docker/image.tar ]]; then
              docker load --input ~/docker/image.tar
            fi

      - run:
          name: Docker Build
          command: |
            ./build-image

      - run:
          name: Save build
          command: |
            set -eo pipefail

            build_tag="${CI_IMAGE_NAME}:build"

            mkdir -pv ~/docker

            get-image-ids() {
              local img
              for img in "$@"; do
                docker history -q "$img" | grep -v '<missing>' | xargs
              done
            }

            # The history is also required to get each individual layer.
            # This is a multi-stage build, which means we need to cache both stages.
            image_ids=($(get-image-ids "$build_tag" "$build_tag-build" "$build_tag-covbuild"))
            docker save "$build_tag" "${image_ids[@]}" > ~/docker/image.tar

      - save_cache:
          key: docker-tar-v2-{{ .Branch }}-{{ .Revision }}
          paths:
            - "~/docker"

      - run:
          name: Execute acceptance test
          command: |
            ./test-image
      - deploy:
          name: Register CI image
          command: |
            set -eo pipefail
            shopt -s nullglob

            build_tag="${CI_IMAGE_NAME}:build"

            push_tags=()

            case "$CIRCLE_BRANCH" in
              master)
                push_tags+=(
                  "${CI_IMAGE_NAME}:${PACKER_VERSION}.${TERRAFORM_VERSION}.${CIRCLE_BUILD_NUM}"
                  "${CI_IMAGE_NAME}:latest"
                )
                ;;
            esac

            for tag in "${push_tags[@]}"; do
              docker tag "$build_tag" "$tag"
              docker push "$tag"
            done
